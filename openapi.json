{
  "openapi": "3.0.0",
  "info": {
    "version": "1.2.0",
    "title": "geo-points-svc",
    "description": ""
  },
  "servers": [
    {
      "url": "https://api.stage.rarime.com",
      "description": "TokenD Developer Environment"
    }
  ],
  "paths": {
    "/integrations/geo-points-svc/v1/public/balances": {
      "post": {
        "tags": [
          "Points balance"
        ],
        "summary": "Create points balance",
        "description": "Create an empty balance for authorized user who makes the request.\n    \nIf balance already exists, but it is disabled (it was not referred by another user,\nbut has fulfilled some event), you should activate balance instead.\n",
        "operationId": "createPointsBalance",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/CreateBalance"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Balance"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "409": {
            "description": "Balance already exists for provided nullifier",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "get": {
        "tags": [
          "Points balance"
        ],
        "summary": "Get leaderboard",
        "description": "Returns leaders sorted by points in descending order.",
        "operationId": "getLeaderboard",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/pageOrder"
          },
          {
            "in": "query",
            "name": "count",
            "description": "Count total number of users.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Balance"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "409": {
            "description": "Balance already exists and it is not disabled",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/balances/{nullifier}": {
      "get": {
        "tags": [
          "Points balance"
        ],
        "summary": "Get points balance",
        "description": "Balance of authorized user who makes the request. Rank in leaderboard is included.\nYou should create new balance for the new user by making POST request.\n\nIf balance is disabled (was created without referral code and not activated),\nsome fields are not returned.\n",
        "operationId": "getPointsBalance",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathNullifier"
          },
          {
            "in": "query",
            "name": "rank",
            "description": "Specifies whether to return the rank. Has no effect on disabled balance.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "in": "query",
            "name": "referral_codes",
            "description": "Specifies whether to return the referral codes. Has no effect on disabled balance.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Balance"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "patch": {
        "tags": [
          "Points balance"
        ],
        "summary": "Activate points balance",
        "description": "Activate points balance for authorized user who makes the request.\nRank is included in response.\n\nOnly balances created without referral code can be activated,\ncheck this with `is_disabled` field.\n\nIf balance's passport was verified earlier, some events will be auto-claimed.\n",
        "operationId": "activatePointsBalance",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ActivateBalance"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Balance activated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Balance"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "description": "Balance already activated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/balances/{nullifier}/join_program": {
      "post": {
        "tags": [
          "Points balance"
        ],
        "summary": "Join rewards program",
        "description": "Join rewards program",
        "operationId": "joinRewardsProgram",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathNullifier"
          },
          {
            "in": "header",
            "name": "Signature",
            "description": "Signature of the request",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-f0-9]{64}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/VerifyPassport"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EventClaimingState"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "404": {
            "description": "Balance not exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "409": {
            "description": "Passport already verified or event absent for user.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/balances/{nullifier}/verify/external": {
      "post": {
        "tags": [
          "Points balance"
        ],
        "summary": "Verify external passport",
        "description": "Verify passport to unlock event claiming and get reward.\nOne passport can't be verified twice.\n\nIn body must be specified anonymous_id and shared_hash\n\nSome events will be automatically claimed in case if balance is active.\n",
        "operationId": "verifyExternalPassport",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathNullifier"
          },
          {
            "in": "header",
            "name": "Signature",
            "description": "Signature of the request",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-f0-9]{64}$"
            }
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/VerifyPassport"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EventClaimingState"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "403": {
            "description": "Invalid signature",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Balance not exists",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "409": {
            "description": "Passport already verified or anonymous ID exists",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/balances/{nullifier}/verifypassport": {
      "post": {
        "tags": [
          "Points balance"
        ],
        "summary": "Verify passport",
        "description": "Verify passport to unlock event claiming and get reward.\nOne passport can't be verified twice.\n\nThere are two verification flows:\n1) Legacy flow is done through Query ZK-proof\n2) New flow is done via JWT, received from Auth service after providing ZK-proof\n\nSome events will be automatically claimed in case if balance is active.\n",
        "operationId": "verifyPassport",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathNullifier"
          },
          {
            "in": "header",
            "name": "Signature",
            "description": "Signature of the request",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-f0-9]{64}$"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/VerifyPassport"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EventClaimingState"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "403": {
            "description": "Invalid signature",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Balance not exists",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "409": {
            "description": "Passport already verified or anonymous ID exists",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/daily_questions/{nullifier}": {
      "get": {
        "tags": [
          "Daily Questions"
        ],
        "summary": "Get daily question",
        "description": "Get a daily question. The user must be \nauthorized and verified (passport scanned, \nverified field is true).\n",
        "operationId": "getDailyQuestion",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DailyQuestions"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "403": {
            "description": "Questions unavailable, try later",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "There is no question in current day.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "409": {
            "description": "User already answer current day question.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "tags": [
          "Daily Questions"
        ],
        "summary": "Answer question",
        "description": "Answer question. The user must be \nauthorized and verified (passport scanned, \nverified field is true).\n",
        "operationId": "answerDailyQuestion",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/DailyQuestionAnswers"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DailyQuestionAnswers"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "404": {
            "description": "User haven't active question or deadline already passed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/daily_questions/{nullifier}/status": {
      "get": {
        "tags": [
          "Daily Questions"
        ],
        "summary": "Daily question status",
        "description": "Get the status of questions. The user must be \nauthorized and verified (passport scanned, \nverified field is true). \nReturns NotFound if next question absent.\n",
        "operationId": "dailyQuestionsStatus",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DailyQuestionsStatus"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "404": {
            "description": "Next question not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/event_types": {
      "get": {
        "tags": [
          "Event types"
        ],
        "summary": "List event types",
        "description": "Returns public configuration of all event types.\nBasically, it is event static metadata (model `EventStaticMeta`)\nfor each event type in the system.\n",
        "operationId": "getEventTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerLang"
          },
          {
            "in": "query",
            "name": "filter[name]",
            "description": "Filter by type name. Possible values should be hard-coded in the client.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "passport_scan"
              }
            }
          },
          {
            "in": "query",
            "name": "filter[name][not]",
            "description": "Inverted filter by type name: excludes provided values\n",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "referral_specific"
              }
            }
          },
          {
            "in": "query",
            "name": "filter[flag]",
            "description": "Filter by configuration flags. Values are disjunctive (OR).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "not_started",
                  "expired",
                  "disabled"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventType"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "tags": [
          "Event types"
        ],
        "summary": "Create event type",
        "description": "Creates a new event type. Requires **admin** role in JWT.\nThe type must not be present in the system.\n",
        "operationId": "createEventType",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/EventType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "409": {
            "description": "Event type already exists",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/event_types/{name}": {
      "get": {
        "tags": [
          "Event types"
        ],
        "summary": "Get event type",
        "description": "Returns public configuration of event type by its unique name",
        "operationId": "getEventType",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerLang"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
              "example": "meetup_participation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventType"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "put": {
        "tags": [
          "Event types"
        ],
        "summary": "Update event type",
        "description": "Update an existing event type. Requires **admin** role in JWT.\n**All attributes** except QR code, Poll Event ID and Poll Contract are\nupdated, ensure to pass every existing field too.\nAlthough this is not JSON:API compliant, it is much easier to work with\nin Go, because differentiating between `{}` and `{\"field\": null}`\nrequires custom unmarshalling implementation.\n",
        "operationId": "updateEventType",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerLang"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
              "example": "meetup_participation"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/EventType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventType"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/event_types/qr": {
      "get": {
        "tags": [
          "Event types"
        ],
        "summary": "List QR event types",
        "description": "Returns configuration of all event types with QR-code.\nBasically, it is event static metadata (model `EventStaticMeta`)\nfor each event type in the system.\nRequires **admin** role in JWT.\n",
        "operationId": "getQREventTypes",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "description": "Іpecifies whether to return the number of uses of the event",
            "required": false,
            "schema": {
              "type": "bool",
              "example": true
            }
          },
          {
            "in": "query",
            "name": "filter[name]",
            "description": "Filter by type name. Possible values should be hard-coded in the client.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "passport_scan"
              }
            }
          },
          {
            "in": "query",
            "name": "filter[name][not]",
            "description": "Inverted filter by type name: excludes provided values\n",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "referral_specific"
              }
            }
          },
          {
            "in": "query",
            "name": "filter[flag]",
            "description": "Filter by configuration flags. Values are disjunctive (OR).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "not_started",
                  "expired",
                  "disabled"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventType"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "post": {
        "tags": [
          "Event types"
        ],
        "summary": "Create event type",
        "description": "Creates a new event type. Requires **admin** role in JWT.\nThe type must not be present in the system.\n",
        "operationId": "createEventType",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/EventType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "409": {
            "description": "Event type already exists",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List events",
        "description": "Returns events for a single user.",
        "operationId": "getEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/filterNullifier"
          },
          {
            "$ref": "#/components/parameters/headerLang"
          },
          {
            "in": "query",
            "name": "filter[status]",
            "description": "Filter by event status, which is:\n  - `open` - you need to do something on the platform\n  - `fulfilled` - you have done something and are eligible to claim the reward\n  - `claimed` - you have claimed the reward\n",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "open",
                  "fulfilled",
                  "claimed"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "filter[meta.static.name]",
            "description": "Filter by event type name. Possible values should be hard-coded in the client.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "passport_scan"
              }
            }
          },
          {
            "in": "query",
            "name": "filter[meta.static.name][not]",
            "description": "Inverted filter by event type name: excludes provided values\n",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "referral_specific"
              }
            }
          },
          {
            "in": "query",
            "name": "filter[has_expiration]",
            "description": "Filter events by type which has or hasn't expiration.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "count",
            "description": "Count total number of events for a single user, applying filters.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/pageOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "required": [
                        "events_count"
                      ],
                      "properties": {
                        "events_count": {
                          "type": "integer",
                          "description": "Appears when `count=true` is specified",
                          "example": 18
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get event",
        "description": "Returns a single event by ID.",
        "operationId": "getEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerLang"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "059c81dd-2a54-44a8-8142-c15ad8f88949"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Event"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      },
      "patch": {
        "tags": [
          "Events"
        ],
        "summary": "Claim points for event",
        "description": "Update event status to _claimed_ and accrue points.\nUser must be authorized, and event must be _fulfilled_ by him.\n",
        "operationId": "claimEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerLang"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "059c81dd-2a54-44a8-8142-c15ad8f88949"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ClaimEventKey"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event claimed, points accrued",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "included"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Event"
                    },
                    "included": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Balance"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "403": {
            "description": "This event type was disabled and cannot be claimed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/events/{id}/qrcode": {
      "patch": {
        "tags": [
          "Events"
        ],
        "summary": "Fulfill QR code event",
        "description": "Fulfill QR code event",
        "operationId": "fulfillQREvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "059c81dd-2a54-44a8-8142-c15ad8f88949"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/FulfillQREvent"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EventClaimingState"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "403": {
            "description": "This event type was disabled and cannot be fulfilled",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    },
    "/integrations/geo-points-svc/v1/public/events/poll": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Fulfill poll event",
        "description": "Fulfill event for voting in Georgian poll by sending proof of voting",
        "operationId": "fulfillPollEvent",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/FulfillPollEvent"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EventClaimingState"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidParameter"
          },
          "401": {
            "$ref": "#/components/responses/invalidAuth"
          },
          "403": {
            "description": "This event type was disabled and cannot be fulfilled",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "description": "Event already fulfilled",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/internalError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivateBalance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActivateBalanceKey"
          },
          {
            "type": "object",
            "x-go-is-request": true,
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "type": "object",
                "required": [
                  "referred_by"
                ],
                "properties": {
                  "referred_by": {
                    "type": "string",
                    "description": "Referral code from the link",
                    "example": "rCx18MZ4"
                  }
                }
              }
            }
          }
        ]
      },
      "ActivateBalanceKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Nullifier of the points owner",
            "example": "0x123...abc",
            "pattern": "^0x[0-9a-fA-F]{64}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "activate_balance"
            ]
          }
        }
      },
      "Balance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BalanceKey"
          },
          {
            "type": "object",
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "type": "object",
                "required": [
                  "amount",
                  "created_at",
                  "updated_at",
                  "level"
                ],
                "properties": {
                  "amount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Amount of points",
                    "example": 580
                  },
                  "is_disabled": {
                    "type": "boolean",
                    "description": "Whether the user was not referred with some code. If it wasn't - balance\nis disabled and very limited in functionality.\n",
                    "example": false
                  },
                  "created_at": {
                    "type": "integer",
                    "description": "Unix timestamp of balance creation",
                    "example": 1706531218
                  },
                  "updated_at": {
                    "type": "integer",
                    "description": "Unix timestamp of the last points accruing",
                    "example": 1706531218
                  },
                  "rank": {
                    "type": "integer",
                    "format": "int",
                    "description": "Rank of the user in the full leaderboard. Returned only for the single user.",
                    "example": 294
                  },
                  "referral_codes": {
                    "type": "array",
                    "description": "Referral codes. Returned only for the single active balance.",
                    "items": {
                      "$ref": "#/components/schemas/ReferralCode"
                    }
                  },
                  "referred_users_count": {
                    "type": "integer",
                    "format": "int",
                    "description": "Number of invited users. Returned only for the single active balance.",
                    "example": 13
                  },
                  "rewarded_referred_users_count": {
                    "type": "integer",
                    "format": "int",
                    "description": "Number of users for whom the reward was received. Returned only for the single active balance.",
                    "example": 5
                  },
                  "level": {
                    "type": "integer",
                    "format": "int",
                    "description": "The level indicates user permissions and features",
                    "example": 2
                  },
                  "is_verified": {
                    "type": "boolean",
                    "description": "Whether the user has scanned passport. Returned only for the single user.\n"
                  }
                }
              }
            }
          }
        ]
      },
      "BalanceKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Nullifier of the points owner",
            "example": "0x123...abc",
            "pattern": "^0x[0-9a-fA-F]{64}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "balance"
            ]
          }
        }
      },
      "ClaimEventKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "059c81dd-2a54-44a8-8142-c15ad8f88949"
          },
          "type": {
            "type": "string",
            "enum": [
              "claim_event"
            ]
          }
        }
      },
      "CreateBalance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateBalanceKey"
          },
          {
            "type": "object",
            "x-go-is-request": true,
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "type": "object",
                "properties": {
                  "referred_by": {
                    "type": "string",
                    "description": "Referral code from the link. Supply it to create the active balance,\notherwise disabled balance is created, and it can be activated later.\n\nDisabled balance is only allowed to verify passport and get.\n",
                    "example": "rCx18MZ4"
                  }
                }
              }
            }
          }
        ]
      },
      "CreateBalanceKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Nullifier of the points owner",
            "example": "0x123...abc",
            "pattern": "^0x[0-9a-fA-F]{64}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "create_balance"
            ]
          }
        }
      },
      "DailyQuestionAnswers": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DailyQuestionsKey"
          },
          {
            "type": "object",
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "type": "object",
                "required": [
                  "answer"
                ],
                "properties": {
                  "answer": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Selected/correct answer option"
                  }
                }
              }
            }
          }
        ]
      },
      "DailyQuestionOptions": {
        "type": "object",
        "required": [
          "id",
          "title"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int",
            "description": "Answer number for the question"
          },
          "title": {
            "type": "string",
            "description": "Answer text"
          }
        }
      },
      "DailyQuestions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DailyQuestionsKey"
          },
          {
            "type": "object",
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "type": "object",
                "required": [
                  "title",
                  "options"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Question title",
                    "example": "Georgian capital"
                  },
                  "options": {
                    "type": "array",
                    "description": "Answer options. Minimum 2, maximum 6",
                    "items": {
                      "$ref": "#/components/schemas/DailyQuestionOptions"
                    },
                    "example": [
                      {
                        "id": 0,
                        "title": ""
                      },
                      {
                        "id": 1,
                        "title": ""
                      },
                      {
                        "id": 2,
                        "title": ""
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "DailyQuestionsKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Question id"
          },
          "type": {
            "type": "string",
            "enum": [
              "daily_questions"
            ]
          }
        }
      },
      "DailyQuestionsStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DailyQuestionsStatusKey"
          },
          {
            "type": "object",
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "type": "object",
                "required": [
                  "next_question_date",
                  "time_for_answer",
                  "reward"
                ],
                "properties": {
                  "next_question_date": {
                    "type": "timestamp",
                    "format": "int64",
                    "description": "Time when the next question will be available. \nIf the time is in the past, then there is a question \non this day and the user has not yet answered it. \nIf the time is in the future, then the user has either \nalready answered the question on the current day or \nthere was no question on the current day.\n",
                    "example": 1725018539
                  },
                  "time_for_answer": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The time within which the user has to answer this question after receiving it.",
                    "example": 30
                  },
                  "reward": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The number of points the user will receive if they answer the question correctly.",
                    "example": 5
                  }
                }
              }
            }
          }
        ]
      },
      "DailyQuestionsStatusKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Question id"
          },
          "type": {
            "type": "string",
            "enum": [
              "daily_questions_status"
            ]
          }
        }
      },
      "Errors": {
        "description": "Standard JSON:API error",
        "type": "object",
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Non empty array of errors occurred during request processing",
            "items": {
              "type": "object",
              "required": [
                "title",
                "status"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title is a short, human-readable summary of the problem",
                  "example": "Bad Request"
                },
                "detail": {
                  "type": "string",
                  "description": "Detail is a human-readable explanation specific to this occurrence of the problem",
                  "example": "Request body was expected"
                },
                "status": {
                  "type": "integer",
                  "description": "Status is the HTTP status code applicable to this problem",
                  "example": 400,
                  "enum": [
                    400,
                    401,
                    403,
                    404,
                    409,
                    500
                  ]
                }
              }
            }
          }
        }
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventKey"
          },
          {
            "type": "object",
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "type": "object",
                "required": [
                  "status",
                  "created_at",
                  "updated_at",
                  "has_expiration",
                  "meta"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "See `filter[status]` parameter for explanation",
                    "enum": [
                      "open",
                      "fulfilled",
                      "claimed"
                    ]
                  },
                  "created_at": {
                    "type": "integer",
                    "description": "Unix timestamp of event creation",
                    "example": 1706531218
                  },
                  "updated_at": {
                    "type": "integer",
                    "description": "Unix timestamp of the event status change",
                    "example": 1706531218
                  },
                  "has_expiration": {
                    "type": "boolean",
                    "description": "Whether this event may become expired."
                  },
                  "meta": {
                    "$ref": "#/components/schemas/EventMeta"
                  },
                  "points_amount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "How many points were accrued. Required only for `claimed` events.\nThis is necessary, as the reward might change over time, while\nthe certain balance should be left intact.\n",
                    "example": 50
                  }
                }
              },
              "relationships": {
                "type": "object",
                "required": [
                  "balance"
                ],
                "properties": {
                  "balance": {
                    "type": "object",
                    "required": [
                      "data"
                    ],
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/BalanceKey"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "EventClaimingState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventClaimingStateKey"
          },
          {
            "type": "object",
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "required": [
                  "claimed"
                ],
                "type": "object",
                "properties": {
                  "claimed": {
                    "type": "bool",
                    "example": true,
                    "description": "If passport scan event was automatically claimed"
                  }
                }
              }
            }
          }
        ]
      },
      "EventClaimingStateKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Nullifier of the points owner",
            "example": "0x123...abc",
            "pattern": "^0x[0-9a-fA-F]{64}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "event_claiming_state"
            ]
          }
        }
      },
      "EventKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "059c81dd-2a54-44a8-8142-c15ad8f88949"
          },
          "type": {
            "type": "string",
            "enum": [
              "event"
            ]
          }
        }
      },
      "EventMeta": {
        "type": "object",
        "required": [
          "static"
        ],
        "properties": {
          "static": {
            "$ref": "#/components/schemas/EventStaticMeta"
          },
          "dynamic": {
            "type": "string",
            "format": "json.RawMessage",
            "description": "Some events require dynamic data, which can be filled into `static` template.",
            "example": {
              "id": "123"
            }
          }
        }
      },
      "EventStaticMeta": {
        "type": "object",
        "description": "Primary event metadata in plain JSON. This is a template\nto be filled by `dynamic` when it's present.\n\nThis structure is also reused as request body to event type creation and update.\n",
        "required": [
          "name",
          "reward",
          "title",
          "description",
          "short_description",
          "frequency",
          "flag",
          "auto_claim",
          "disabled"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique event code name",
            "example": "get_poh"
          },
          "reward": {
            "type": "integer",
            "format": "int64",
            "description": "Reward amount in points",
            "example": 50
          },
          "title": {
            "type": "string",
            "example": "Get PoH credential"
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet"
          },
          "short_description": {
            "type": "string",
            "example": "Short description"
          },
          "frequency": {
            "type": "string",
            "description": "Event frequency, which means how often you can fulfill\ncertain task and claim the reward.\n",
            "enum": [
              "one-time",
              "daily",
              "weekly",
              "unlimited"
            ]
          },
          "starts_at": {
            "type": "string",
            "format": "time.Time",
            "description": "General event starting date (UTC RFC3339)",
            "example": "2020-01-01T00:00:00.000Z"
          },
          "expires_at": {
            "type": "string",
            "format": "time.Time",
            "description": "General event expiration date (UTC RFC3339)",
            "example": "2020-01-01T00:00:00.000Z"
          },
          "action_url": {
            "type": "string",
            "description": "Page where you can fulfill the event",
            "example": "https://robotornot.rarimo.com"
          },
          "logo": {
            "type": "string",
            "description": "Event logo",
            "example": "https://logo.com/some_logo.svg"
          },
          "flag": {
            "type": "string",
            "description": "Event configuration flag:\n  - active: Events can be opened, fulfilled, claimed\n  - not_started: Event are not available yet, see `starts_at`\n  - expired: Event is not available, as it has already expired, see `expires_at`\n  - disabled: Event is disabled in the system\n\nIf event is disabled, it doesn't matter if it's expired or not started:\nit has `disabled` flag.\n\nDo not specify this field on creation: this structure is reused for request body too.\n",
            "enum": [
              "active",
              "not_started",
              "expired",
              "disabled"
            ]
          },
          "auto_claim": {
            "type": "boolean",
            "description": "Whether the event is automatically claimed on fulfillment, or requires manual claim"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether the event is disabled in the system. Disabled events can only be retrieved."
          },
          "qr_code_value": {
            "type": "string",
            "description": "Base64-encoded QR code. Must match the code provided in event type.",
            "example": "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABaElEQVR4AWP4//8/AyUYw"
          },
          "usage_count": {
            "type": "integer",
            "format": "int",
            "description": "Number of uses. Only available to the administrator.",
            "example": 1002
          },
          "poll_event_id": {
            "type": "string",
            "description": "Decimal value of the Event ID",
            "example": "123456789987654321"
          },
          "poll_contract": {
            "type": "string",
            "description": "Hex voting contract address with 0x.",
            "example": "0x123...123",
            "pattern": "^0x[0-9a-fA-F]{40}$"
          }
        }
      },
      "EventType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventTypeKey"
          },
          {
            "type": "object",
            "description": "Event type configuration and metadata",
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "type": "object",
                "format": "EventStaticMeta",
                "$ref": "#/components/schemas/EventStaticMeta"
              }
            }
          }
        ]
      },
      "EventTypeKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Event type unique code name",
            "example": "passport_scan"
          },
          "type": {
            "type": "string",
            "enum": [
              "event_type"
            ]
          }
        }
      },
      "FulfillPollEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FulfillPollEventKey"
          },
          {
            "type": "object",
            "x-go-is-request": true,
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "required": [
                  "proof",
                  "proposal_id"
                ],
                "type": "object",
                "properties": {
                  "proof": {
                    "type": "object",
                    "format": "types.ZKProof",
                    "description": "Proof of voting in some poll."
                  },
                  "proposal_id": {
                    "type": "string",
                    "pattern": "[0-9]+",
                    "description": "Vote proposal id"
                  }
                }
              }
            }
          }
        ]
      },
      "FulfillPollEventKey": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "fulfill_poll_event"
            ]
          }
        }
      },
      "FulfillQREvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FulfillQREventKey"
          },
          {
            "type": "object",
            "x-go-is-request": true,
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "required": [
                  "qr_code"
                ],
                "type": "object",
                "properties": {
                  "qr_code": {
                    "type": "string",
                    "description": "Base64-encoded QR code",
                    "example": "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABaElEQVR4AWP4//8/AyUYw"
                  }
                }
              }
            }
          }
        ]
      },
      "FulfillQREventKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Event ID",
            "example": "059c81dd-2a54-44a8-8142-c15ad8f88949"
          },
          "type": {
            "type": "string",
            "enum": [
              "fulfill_qr_event"
            ]
          }
        }
      },
      "ReferralCode": {
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Referral code itself, unique identifier",
            "example": "bDSCcQB8Hhk"
          },
          "status": {
            "type": "string",
            "description": "Status of the code, belonging to this user (referrer):\n  1. infinity: the code have unlimited usage count and user can get points for each user who scanned passport\n  2. active: the code is not used yet by another user (referee)\n  3. awaiting: the code is used by referee who has scanned passport, but the referrer hasn't yet\n  4. rewarded: the code is used, both referee and referrer have scanned passports\n  5. consumed: the code is used by referee who has not scanned passport yet\n\nThe list is sorted by priority. E.g. if the referee has scanned passport,\nbut referrer not, the status would be `consumed`. If both not scann passport yet\nstatus would be `awaiting`.\n",
            "enum": [
              "infinity",
              "active",
              "awaiting",
              "rewarded",
              "consumed"
            ]
          }
        }
      },
      "VerifyPassport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VerifyPassportKey"
          },
          {
            "type": "object",
            "x-go-is-request": true,
            "required": [
              "attributes"
            ],
            "properties": {
              "attributes": {
                "required": [
                  "anonymous_id"
                ],
                "type": "object",
                "properties": {
                  "anonymous_id": {
                    "type": "string",
                    "description": "Unique identifier of the passport.",
                    "example": "2bd3a2532096fee10a45a40e444a11b4d00a707f3459376087747de05996fbf5"
                  },
                  "shared_hash": {
                    "type": "string",
                    "description": "Unique identifier for linking internal and external passports",
                    "example": "12345678901234567890"
                  },
                  "proof": {
                    "type": "object",
                    "format": "types.ZKProof",
                    "description": "Query ZK passport verification proof.\nRequired for passport verification endpoint.\n"
                  }
                }
              }
            }
          }
        ]
      },
      "VerifyPassportKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Nullifier of the points owner",
            "example": "0x123...abc",
            "pattern": "^0x[0-9a-fA-F]{64}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "verify_passport"
            ]
          }
        }
      }
    },
    "responses": {
      "internalError": {
        "description": "Internal server error",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "invalidAuth": {
        "description": "You must provide a valid authorization params.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "invalidParameter": {
        "description": "One of the parameters is invalid. Refer to the response body for details.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "notFound": {
        "description": "Requested resource does not exist.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      }
    },
    "parameters": {
      "filterNullifier": {
        "in": "query",
        "name": "filter[nullifier]",
        "required": true,
        "description": "Filter by single nullifier. Auth is required for this filter.",
        "schema": {
          "type": "string",
          "example": "0x123...abc",
          "pattern": "^0x[0-9a-fA-F]{64}$"
        }
      },
      "headerLang": {
        "in": "header",
        "name": "Accept-Language",
        "description": "Localization of event types. If locale is not configured for the type, the default is returned.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "en-US"
        }
      },
      "pageCursor": {
        "in": "query",
        "name": "page[cursor]",
        "required": false,
        "schema": {
          "type": "integer",
          "example": 1706531218
        },
        "description": "Cursor position"
      },
      "pageLimit": {
        "in": "query",
        "name": "page[limit]",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 15,
          "description": "Numbers of items per page to return."
        }
      },
      "pageNumber": {
        "in": "query",
        "name": "page[number]",
        "description": "The number of the page to return.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 0,
          "example": 3
        }
      },
      "pageOrder": {
        "in": "query",
        "name": "page[order]",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "desc",
          "description": "Order of records on the page."
        }
      },
      "pathNullifier": {
        "in": "path",
        "name": "nullifier",
        "required": true,
        "schema": {
          "type": "string",
          "example": "0x123...abc",
          "pattern": "^0x[0-9a-fA-F]{64}$"
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
